{"ast":null,"code":"var _jsxFileName = \"/Users/jennyzhang/Desktop/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.value);\n}\n\nlet scores = {\n  X: -10,\n  O: 10,\n  tie: 0\n};\nlet human = 'X';\nlet ai = 'O';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n\n    if (checkWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = 'X';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n    setTimeout(() => {\n      this.computerMove(squares);\n    }, 1000);\n  }\n\n  computerMove(squares) {\n    // call minimax \n    let avail_positions = this.getAvailableSquares(squares);\n    let bestScore = -Infinity;\n    let bestMove;\n\n    for (var spot = 0; spot < avail_positions.length; spot++) {\n      let idx = avail_positions[spot];\n      squares[idx] = \"O\";\n      let score = this.minimax(squares, false);\n      squares[idx] = null;\n\n      if (score > bestScore) {\n        bestScore = score;\n        bestMove = idx;\n      }\n    }\n\n    squares[bestMove] = 'O';\n    console.log(\"best move: \" + bestMove);\n    console.log(\"best score: \" + bestScore);\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  minimax(squares, isMaximizing) {\n    let result = checkWinner(squares);\n\n    if (result !== null) {\n      return scores[result];\n    }\n\n    var avail_positions = this.getAvailableSquares(squares);\n\n    if (isMaximizing) {\n      //console.log(\"maximizing\" + squares)\n      let bestScore = -Infinity;\n\n      for (var spot = 0; spot < avail_positions.length; spot++) {\n        let idx = avail_positions[spot];\n        squares[idx] = \"O\";\n        let score = this.minimax(squares, false);\n        squares[idx] = null;\n        bestScore = Math.max(bestScore, score);\n      }\n\n      return bestScore;\n    } else {\n      //console.log(\"minimizing\" + squares)\n      let bestScore = Infinity;\n\n      for (var spot = 0; spot < avail_positions.length; spot++) {\n        let idx = avail_positions[spot];\n        squares[idx] = \"X\";\n        let score = this.minimax(squares, true);\n        squares[idx] = null;\n        bestScore = Math.min(bestScore, score);\n      }\n\n      return bestScore;\n    }\n  }\n\n  getAvailableSquares(squares) {\n    var avail_squares = [];\n\n    for (var i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        avail_squares.push(i);\n      }\n    }\n\n    return avail_squares;\n  }\n\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    });\n  }\n\n  render() {\n    const winner = checkWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    })));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 1\n  }\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction checkWinner(board) {\n  let winner = null; // horizontal\n\n  for (let i = 0; i < 9; i += 3) {\n    if (equals3(board[i], board[i + 1], board[i + 2])) {\n      winner = board[i];\n    }\n  } // Vertical\n\n\n  for (let i = 0; i < 3; i++) {\n    if (equals3(board[i], board[i + 3], board[i + 6])) {\n      winner = board[i];\n    }\n  } // Diagonal\n\n\n  if (equals3(board[0], board[4], board[8])) {\n    winner = board[0];\n  }\n\n  if (equals3(board[2], board[4], board[6])) {\n    winner = board[2];\n  }\n\n  let openSpots = 0;\n\n  for (let i = 0; i < 9; i++) {\n    if (board[i] == null) {\n      openSpots++;\n    }\n  }\n\n  if (winner == null && openSpots == 0) {\n    return 'tie';\n  } else {\n    return winner;\n  }\n}\n\nfunction equals3(a, b, c) {\n  return a == b && b == c && a != null;\n}","map":{"version":3,"sources":["/Users/jennyzhang/Desktop/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","scores","X","O","tie","human","ai","Board","Component","constructor","state","squares","Array","fill","xIsNext","handleClick","i","slice","checkWinner","setState","setTimeout","computerMove","avail_positions","getAvailableSquares","bestScore","Infinity","bestMove","spot","length","idx","score","minimax","console","log","isMaximizing","result","Math","max","min","avail_squares","push","renderSquare","render","winner","status","Game","document","getElementById","calculateWinner","lines","a","b","c","board","equals3","openSpots"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n    <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n    </button>\n    );\n}\nlet scores = {\n    X: -10,\n    O: 10, \n    tie: 0\n}\n\nlet human = 'X';\nlet ai = 'O';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (checkWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = 'X' ;\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n\n        setTimeout(() => { this.computerMove(squares)}, 1000);\n    }\n\n    \n    \n    computerMove(squares) {\n\n        // call minimax \n        let avail_positions = this.getAvailableSquares(squares);\n        let bestScore = -Infinity;\n        let bestMove;\n\n        for (var spot = 0; spot < avail_positions.length; spot++) {\n            let idx = avail_positions[spot]\n            squares[idx] = \"O\"\n            let score = this.minimax(squares, false);\n            squares[idx] = null\n\n            if (score > bestScore) {\n                bestScore = score\n                bestMove = idx\n            }\n        }\n        squares[bestMove] = 'O';\n        console.log(\"best move: \" + bestMove)\n        console.log(\"best score: \" + bestScore)\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    minimax(squares, isMaximizing) {\n        let result = checkWinner(squares);\n        if (result !== null) {\n            return scores[result];\n        }\n        var avail_positions = this.getAvailableSquares(squares)\n\n        if (isMaximizing) {\n            //console.log(\"maximizing\" + squares)\n            let bestScore = -Infinity;\n\n            for (var spot = 0; spot < avail_positions.length; spot++) {\n                let idx = avail_positions[spot]\n                squares[idx] = \"O\"\n                let score = this.minimax(squares, false);\n                squares[idx] = null\n\n                bestScore = Math.max(bestScore, score)\n            }\n            return bestScore\n        } else {\n            //console.log(\"minimizing\" + squares)\n            let bestScore = Infinity;\n\n            for (var spot = 0; spot < avail_positions.length; spot++) {\n                let idx = avail_positions[spot]\n                squares[idx] = \"X\"\n                let score = this.minimax(squares, true);\n                squares[idx] = null\n\n                bestScore = Math.min(bestScore, score)\n            }\n            return bestScore\n        } \n    }\n    \n    getAvailableSquares(squares) {\n        var avail_squares = []\n        for (var i = 0; i < squares.length; i++) {\n            if (squares[i] == null) {\n                avail_squares.push(i)\n            }\n        }\n        return avail_squares\n    }\n\n    renderSquare(i) {\n        return (\n        <Square\n            value={this.state.squares[i]}\n            onClick={() => this.handleClick(i)}\n        />\n        );\n    }\n\n    render() {\n        const winner = checkWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n        <div>\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            </div>\n        </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board />\n            </div>\n            <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n            </div>\n        </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n<Game />,\ndocument.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction checkWinner(board) {\n    let winner = null;\n  \n    // horizontal\n    for (let i = 0; i < 9; i+=3) {\n      if (equals3(board[i], board[i + 1], board[i + 2])) {\n        winner = board[i];\n      }\n    }\n  \n    // Vertical\n    for (let i = 0; i < 3; i++) {\n      if (equals3(board[i], board[i + 3], board[i + 6])) {\n        winner = board[i];\n      }\n    }\n  \n    // Diagonal\n    if (equals3(board[0], board[4], board[8])) {\n      winner = board[0];\n    }\n    if (equals3(board[2], board[4], board[6])) {\n      winner = board[2];\n    }\n  \n    let openSpots = 0;\n    for (let i = 0; i < 9; i++) {\n        if (board[i] == null) {\n          openSpots++;\n        }\n    }\n  \n    if (winner == null && openSpots == 0) {\n      return 'tie';\n    } else {\n      return winner;\n    }\n  }\n\n  function equals3(a, b, c) {\n    return a == b && b == c && a != null;\n  }"]},"metadata":{},"sourceType":"module"}